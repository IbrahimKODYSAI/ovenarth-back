let express,cookieParser,mongoose,csrf,cors,readdirSync,morgan,dotenv,path;_55b‍.w("express",[["default",["express"],function(v){express=v}]]);_55b‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_55b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_55b‍.w("csurf",[["default",["csrf"],function(v){csrf=v}]]);_55b‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_55b‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);_55b‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_55b‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_55b‍.w("path",[["default",["path"],function(v){path=v}]]);








dotenv.config();

const csrfProtection = csrf({ cookie: true });
// express app

const app = express();
app.use(cookieParser());



// connect to db

mongoose
  .connect(process.env.DB_CONNECTION)
  .then(() => {
    console.log("DB connected !");
  })
  .catch((error) => {
    _55b‍.g.console.log("DB error", error);
  });

// Middlewares

app.use(cors({ origin: true }));

app.use(express.urlencoded({ extended: true }));

app.use(
  express.json({
    verify: (req, res, buffer) => (req["rawBody"] = buffer),
  })
);
app.use(morgan("dev"));

// Route  middlewares

app.get("/", (req, res) => {
  res.send("we are on home server");
});

readdirSync("./routes").map((route) =>
  app.use("/api", require(`./routes/${route}`))
);

app.use(csrfProtection);

app.get("/api/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

// server listen

const port = process.env.PORT || 3001;

app.listen(port, () => {
  console.log(`server is up and running on port ${port}`);
});
