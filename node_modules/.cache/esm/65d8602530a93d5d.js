let User,bcrypt,jwt,AWS,dotenv,nanoid,queryString;_30a‍.x([["default",()=>_30a‍.o]]);_30a‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_30a‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_30a‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_30a‍.w("aws-sdk",[["default",["AWS"],function(v){AWS=v}]]);_30a‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_30a‍.w("nanoid",[["default",["nanoid"],function(v){nanoid=v}]]);_30a‍.w("query-string",[["default",["queryString"],function(v){queryString=v}]]);




const Stripe = require("stripe")(process.env.STRIP_SECRET_KEY);




dotenv.config();

const becomeInstructor = async (req, res) => {
  // 1. find user from database
  try {
    const userId = req.auth;
    const user = await User.findOne({ _id: userId });

    // 2. if user don't have stripe_ccount_id yet ,then create new
    if (!user.stripe_account_id) {
      const account = await Stripe.account.create({ type: "express" });
      // console.log("account =>", account.id);
      user.stripe_account_id = account.id;
      user.save();
    }

    // 3. create account link based on account id (for frontend to complete onboarding)
    let accountLink = await Stripe.accountLinks.create({
      account: user.stripe_account_id,
      refresh_url: process.env.STRIP_REDIRECT_URL,
      return_url: process.env.STRIP_REDIRECT_URL,
      type: "account_onboarding",
    });
    // console.log(accountLink)

    // 4. pre-fill any info such as eamil (optional), then send ural to front end};
    accountLink = Object.assign(accountLink, {
      "stripe_user[email]": user.email,
    });

    //5. then send the account link response to frontend
    res.send(`${accountLink.url}?${queryString.stringify(accountLink)}`);
  } catch (err) {
    _30a‍.g.console.log("Become instructor error", err);
  }
};
_30a‍.d({
  becomeInstructor,
});
